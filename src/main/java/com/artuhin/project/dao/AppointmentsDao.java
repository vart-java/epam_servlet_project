package com.artuhin.project.dao;

import com.artuhin.project.model.Appointment;
import com.artuhin.project.model.Procedure;
import com.artuhin.project.util.rsparser.WithoutReflectionParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class AppointmentsDao {

    private static Logger LOGGER = LogManager.getLogger(AppointmentsDao.class);
    private final String SQL_EXCEPTION = "SQL exception Report DAO";

    public int create(Appointment appointment) {
        List<Appointment> appointments;
        List<Procedure> procedures;
        int autoGeneratedId = 0;
        String CREATE_SQL = "INSERT INTO appointments (procedure_name, master_login, client_login, start_time) VALUES (?, ?, ?, ?)";
        String GET_APPOINTMENTS = "SELECT * FROM appointments WHERE master_login = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(CREATE_SQL, Statement.RETURN_GENERATED_KEYS);
             PreparedStatement preparedStatement1 = connectionProxy.prepareStatement(GET_APPOINTMENTS)) {
            preparedStatement1.setString(1, appointment.getMasterLogin());
            appointments = WithoutReflectionParser.getInstance().appointmentsParser(preparedStatement.executeQuery());
            for (Appointment appointmentTemp : appointments) {
                if (appointment.getStartTime().getTime() >= appointmentTemp.getStartTime().getTime() && appointment.getStartTime().getTime() <= (appointmentTemp.getStartTime().getTime() + appointment.getProcedure().getDuration())) {
                    return autoGeneratedId;
                }
            }
            preparedStatement.setString(1, appointment.getProcedure().getName());
            preparedStatement.setString(2, appointment.getMasterLogin());
            preparedStatement.setString(2, appointment.getClientLogin());
            preparedStatement.setTimestamp(4, appointment.getStartTime());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    public boolean update(Appointment appointment) {
        String UPDATE_SQL = "UPDATE appointments SET procedure_name = ?, master_login = ?, client_login = ?, start_time = ? WHERE id = ?";
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_SQL)) {
            preparedStatement.setString(1, appointment.getProcedure().getName());
            preparedStatement.setString(2, appointment.getMasterLogin());
            preparedStatement.setString(3, appointment.getClientLogin());
            preparedStatement.setTimestamp(4, appointment.getStartTime());
            preparedStatement.setLong(5, appointment.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public boolean delete(int id) {
        String DELETE_SQL = "DELETE FROM appointments WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public Appointment getByID(int id) {
        Appointment appointment = new Appointment();
        String GET_BY_ID_SQL = "SELECT * FROM appointments WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_BY_ID_SQL)) {
            preparedStatement.setInt(1, id);
            appointment = WithoutReflectionParser.getInstance().appointmentsParser(preparedStatement.executeQuery()).get(0);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return appointment;
    }

    public List<Appointment> getAll() {
        List<Appointment> resultList = new ArrayList<>();
        String GET_ALL_SQL = "SELECT * FROM appointments";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = WithoutReflectionParser.getInstance().appointmentsParser(preparedStatement.executeQuery());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            String CLEAR_ALL_SQL = "DELETE * FROM appointments";
            statement.executeUpdate(CLEAR_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public List<Appointment> getAppointmentsByClientLogin(String login) {
        List<Appointment> appointments = new ArrayList<>();
        String GET_EVENTS_BY_CLIENT_ID_SQL = "SELECT * FROM appointments WHERE client_login = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_EVENTS_BY_CLIENT_ID_SQL)) {
            preparedStatement.setString(1, login);
            appointments = WithoutReflectionParser.getInstance().appointmentsParser(preparedStatement.executeQuery());
            System.out.println();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return appointments;
    }

    public List<Appointment> getAppointmentByMasterLogin(String login) {
        List<Appointment> appointments = new ArrayList<>();
        String GET_APPOINTMENTS_BY_MASTER_ID_SQL = "SELECT * FROM appointments WHERE master_login = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_APPOINTMENTS_BY_MASTER_ID_SQL)) {
            preparedStatement.setString(1, login);
            appointments = WithoutReflectionParser.getInstance().appointmentsParser(preparedStatement.executeQuery());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return appointments;
    }
}
