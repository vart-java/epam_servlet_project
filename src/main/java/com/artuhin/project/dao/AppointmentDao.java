package com.artuhin.project.dao;

import com.artuhin.project.model.Appointment;
import com.artuhin.project.util.rsparser.ResultSetParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class AppointmentDao {
    private static final Logger LOGGER = LoggerFactory.getLogger(AppointmentDao.class);
    private static final String SQL_EXCEPTION = "SQL exception in appointments DAO";
    private static AppointmentDao instance;

    private AppointmentDao() {
    }

    public static synchronized AppointmentDao getInstance() {
        if (instance == null) {
            instance = new AppointmentDao();
        }
        return instance;
    }

    public int create(Appointment appointment) {
        int autoGeneratedId = 0;
        if (checkFreeTime(appointment)) {
            return autoGeneratedId;
        }
        String createSql = "INSERT INTO appointments (procedure_name, master_login, client_login, start_time, is_confirmed, is_paid_up, is_finished, is_rated) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(createSql, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, appointment.getProcedure().getName());
            preparedStatement.setString(2, appointment.getMasterLogin());
            preparedStatement.setString(3, appointment.getClientLogin());
            preparedStatement.setTimestamp(4, appointment.getStartTime());
            preparedStatement.setBoolean(5, appointment.isConfirmed());
            preparedStatement.setBoolean(6, appointment.isPaidUp());
            preparedStatement.setBoolean(7, appointment.isFinished());
            preparedStatement.setBoolean(8, appointment.isRated());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    public Appointment get(long id) {
        Appointment appointment = new Appointment();
        String getByIdSql = "SELECT * FROM appointments WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(getByIdSql)) {
            preparedStatement.setLong(1, id);
            appointment = ResultSetParser.getInstance().appointmentsParser(preparedStatement.executeQuery()).get(0);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return appointment;
    }

    public boolean update(Appointment appointment) {
        String updateSql = "UPDATE appointments SET procedure_name = ?, master_login = ?, client_login = ?, start_time = ?, procedure_duration = ?, is_confirmed = ?, is_paid_up = ?, is_finished = ?, is_rated = ?  WHERE id = ?";
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(updateSql)) {
            preparedStatement.setString(1, appointment.getProcedure().getName());
            preparedStatement.setString(2, appointment.getMasterLogin());
            preparedStatement.setString(3, appointment.getClientLogin());
            preparedStatement.setTimestamp(4, appointment.getStartTime());
            preparedStatement.setLong(5, appointment.getProcedure().getDuration());
            preparedStatement.setBoolean(6, appointment.isConfirmed());
            preparedStatement.setBoolean(7, appointment.isPaidUp());
            preparedStatement.setBoolean(8, appointment.isFinished());
            preparedStatement.setBoolean(9, appointment.isRated());
            preparedStatement.setLong(10, appointment.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public boolean delete(long id) {
        String deleteSql = "DELETE FROM appointments WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(deleteSql)) {
            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public List<Appointment> getAll() {
        List<Appointment> resultList = new ArrayList<>();
        String getAllSql = "SELECT * FROM appointments";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(getAllSql)) {
            resultList = ResultSetParser.getInstance().appointmentsParser(preparedStatement.executeQuery());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    public boolean checkFreeTime(Appointment appointment) {
        List<Appointment> appointments;
        String getAppointments = "SELECT * FROM appointments WHERE master_login = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(getAppointments)) {
            String login = appointment.getMasterLogin();
            preparedStatement.setString(1, login);
            appointments = ResultSetParser.getInstance().appointmentsParser(preparedStatement.executeQuery());
            for (Appointment appointmentTemp : appointments) {
                if (appointment.getStartTime().getTime() >= appointmentTemp.getStartTime().getTime()
                        && appointment.getStartTime().getTime() <= (appointmentTemp.getStartTime().getTime() + appointmentTemp.getProcedure().getDuration())
                        || (appointment.getStartTime().getTime() + appointment.getProcedure().getDuration()) >= appointmentTemp.getStartTime().getTime()
                        && (appointment.getStartTime().getTime() + appointment.getProcedure().getDuration()) <= (appointmentTemp.getStartTime().getTime() + appointmentTemp.getProcedure().getDuration())) {
                    return true;
                }
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return false;
    }
}
