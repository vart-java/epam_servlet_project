package com.artuhin.project.dao;

import com.artuhin.project.model.Event;
import com.artuhin.project.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class EventsDao implements CrudDao<Event> {

    private static Logger LOGGER = LogManager.getLogger(EventsDao.class);
    private final String SQL_EXCEPTION = "SQL exception Report DAO";

    @Override
    public int create(Event event) {
        int autoGeneratedId = 0;
        String CREATE_SQL = "INSERT INTO events (service_id, master_id, client_id, start_time) VALUES (?, ?, ?, ?)";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(CREATE_SQL, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setLong(1, event.getProcedureId());
            preparedStatement.setLong(2, event.getMasterId());
            preparedStatement.setLong(3, event.getClientId());
            preparedStatement.setTimestamp(4, event.getStartTime());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    @Override
    public boolean update(Event event) {
        String UPDATE_SQL = "UPDATE events SET service_id = ?, master_id = ?, client_id = ?, start_time = ? WHERE id = ?";
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_SQL)) {
            preparedStatement.setLong(1, event.getProcedureId());
            preparedStatement.setLong(2, event.getMasterId());
            preparedStatement.setLong(3, event.getClientId());
            preparedStatement.setTimestamp(4, event.getStartTime());
            preparedStatement.setLong(5, event.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        String DELETE_SQL = "DELETE FROM events WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public Event getByID(int id) {
        Event event = new Event();
        String GET_BY_ID_SQL = "SELECT * FROM events WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_BY_ID_SQL)) {
            preparedStatement.setInt(1, id);
            event = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Event()).get(0);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return event;
    }

    @Override
    public List<Event> getAll() {
        List<Event> resultList = new ArrayList<>();
        String GET_ALL_SQL = "SELECT * FROM events";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Event());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            String CLEAR_ALL_SQL = "DELETE FROM events";
            statement.executeUpdate(CLEAR_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public List<Event> getEventsByClientId(long id) {
        List<Event> events = new ArrayList<>();
        String GET_EVENTS_BY_CLIENT_ID_SQL = "SELECT * FROM events WHERE client_id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_EVENTS_BY_CLIENT_ID_SQL)) {
            preparedStatement.setLong(1, id);
            events = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Event());
            System.out.println();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return events;
    }

    public List<Event> getEventsByMasterId(long id) {
        List<Event> events = new ArrayList<>();
        String GET_EVENTS_BY_MASTER_ID_SQL = "SELECT * FROM events WHERE master_id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_EVENTS_BY_MASTER_ID_SQL)) {
            preparedStatement.setLong(1, id);
            events = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Event());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return events;
    }

    public List<Event> getEventsByServiceId(int id) {
        List<Event> events = new ArrayList<>();
        String GET_EVENTS_BY_SERVICE_ID_SQL = "SELECT * FROM events WHERE service_id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_EVENTS_BY_SERVICE_ID_SQL)) {
            preparedStatement.setInt(1, id);
            events = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Event());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return events;
    }
}
