package com.artuhin.project.dao;

import com.artuhin.project.model.Event;
import com.artuhin.project.model.Role;
import com.artuhin.project.model.Procedure;
import com.artuhin.project.model.User;
import com.artuhin.project.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

public class UserDao implements CrudDao<User> {

    private static Logger LOGGER = LogManager.getLogger(UserDao.class);
    private final String SQL_EXCEPTION = "SQL exception user DAO";

    @Override
    public int create(User user) {
        int autoGeneratedId = 0;
        String CREATE_SQL = "INSERT INTO users (role_id, login, password) VALUES (?, ?, ?)";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(CREATE_SQL, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setInt(1, user.getRoleId());
            preparedStatement.setString(2, user.getLogin());
            preparedStatement.setString(3, user.getPassword());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return 0;
        }
        return autoGeneratedId;
    }

    @Override
    public boolean update(User user) {
        String UPDATE_SQL = "UPDATE users SET login = ?, password = ?, role_id = ? WHERE id = ?";
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_SQL)) {
            preparedStatement.setString(1, user.getLogin());
            preparedStatement.setString(2, user.getPassword());
            preparedStatement.setInt(3, user.getRoleId());
            preparedStatement.setLong(4, user.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        String DELETE_SQL = "DELETE FROM users WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public User getByID(int id) {
        User user = new User();
        String GET_BY_ID_SQL = "SELECT * FROM users WHERE id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(GET_BY_ID_SQL)) {
            preparedStatement.setInt(1, id);
            List<User> resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), user);
            if (!resultList.isEmpty()) {
                user = resultList.get(0);
            } else {

            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return user;
    }

    @Override
    public List<User> getAll() {
        List<User> resultList = new ArrayList<>();
        String GET_ALL_SQL = "SELECT * FROM users ORDER BY login";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            String DELETE_ALL_SQL = "DELETE FROM users";
            statement.executeUpdate(DELETE_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public List<Procedure> getAllServices() {
        List<Procedure> resultList = new ArrayList<>();
        String GET_ALL_SQL = "SELECT * FROM services";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Procedure());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    public List<User> getAllUsersByRole(Role role) {
        List<User> resultList = new ArrayList<>();
        String GET_ALL_SQL = "SELECT * FROM users WHERE role_id = ? ORDER BY login";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            preparedStatement.setInt(1, role.getId());
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    public boolean vote(int eventId, int rating) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement1 = connectionProxy.prepareStatement("UPDATE users SET rating = ? WHERE id = ?")) {
            preparedStatement1.setInt(1, rating);
            preparedStatement1.setInt(2, getMasterByEventId(connectionProxy, eventId));
            preparedStatement1.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    private int getMasterByEventId(ConnectionProxy connectionProxy, int reportId) {
        try (PreparedStatement preparedStatement = connectionProxy.prepareStatement("SELECT master_id FROM events WHERE id = ?")) {
            preparedStatement.setInt(1, reportId);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return 0;
    }

    public List<Event> getEventsByMasterId(int id) {
        List<Event> eventList = new ArrayList<>();
        String CHECK_MASTER_ACTIV_BY_DATE_SQL = "SELECT start_time, duration FROM events LEFT JOIN services ON service_id = id WHERE master_id = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(CHECK_MASTER_ACTIV_BY_DATE_SQL)) {
            preparedStatement.setInt(1, id);
            eventList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Event());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return eventList;
    }

    public boolean registerUserToEvent(int clientId, int serviceId, int masterId, Timestamp timestamp) {
        if (!checkIsMasterFree(getEventsByMasterId(masterId), timestamp)) {
            return false;
        }
        try {
            String REGISTER_USER_TO_EVENT_SQL = "INSERT INTO events (service_id, master_id, client_id, start_time) values(?, ?, ?, ?)";
            try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
                 PreparedStatement preparedStatement = connectionProxy.prepareStatement(REGISTER_USER_TO_EVENT_SQL)) {
                preparedStatement.setInt(1, serviceId);
                preparedStatement.setInt(2, masterId);
                preparedStatement.setInt(3, clientId);
                preparedStatement.setTimestamp(4, timestamp);
                preparedStatement.executeUpdate();
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    private boolean checkIsMasterFree(List<Event> events, Timestamp timestamp) {
        for (Event event : events) {
            if (timestamp.getTime() >= event.getStartTime().getTime() && timestamp.getTime() <= (event.getStartTime().getTime() + event.getServiceId())) {
                return false;
            }
        }
        return true;
    }

    public List<User> getMastersByRating() {
        List<User> resultList = new ArrayList<>();
        String GET_MASTERS_BY_RATING_SQL = "SELECT * FROM users WHERE role_id = ? ORDER BY rating DESC";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_MASTERS_BY_RATING_SQL)) {
            preparedStatement.setInt(1, Role.MASTER.getId());
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    public List<User> getMastersByRating(int rating) {
        List<User> resultList = new ArrayList<>();
        String GET_MASTERS_BY_RATING_SQL = "SELECT * FROM users WHERE role_id = ? AND rating = ? ORDER BY login";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_MASTERS_BY_RATING_SQL)) {
            preparedStatement.setInt(1, Role.MASTER.getId());
            preparedStatement.setInt(2, rating);
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    public List<User> getMastersByLogins() {
        List<User> resultList = new ArrayList<>();
        String GET_MASTERS_BY_LOGINS_SQL = "SELECT * FROM users WHERE role_id = ? ORDER BY login";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_MASTERS_BY_LOGINS_SQL)) {
            preparedStatement.setInt(1, Role.MASTER.getId());
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }


    public boolean authUser(String login, String password) {
        boolean result = false;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement("SELECT * FROM users WHERE login = ? AND password = ?")) {
            preparedStatement.setString(1, login);
            preparedStatement.setString(2, password);
            result = preparedStatement.executeQuery().next();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    public User getByLogin(String login) {
        User user = new User();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement("SELECT * FROM users WHERE login = ?")) {
            preparedStatement.setString(1, login);
            List<User> users = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
            if (!users.isEmpty()) {
                user = users.get(0);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return user;
    }
}
